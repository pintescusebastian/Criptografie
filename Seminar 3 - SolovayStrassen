import java.util.Random;
import java.io.Console;
import java.io.IOException;
import java.math.BigInteger;

public class SolovayStrassen {
    private int numar;
    private int iteratii; 

    public static void main(String[] args) {
        new SolovayStrassen(61, 5); 
    }

    public SolovayStrassen(int numar, int iteratii) {
        this.numar = numar;
        this.iteratii = iteratii;
        boolean rezultat = Prime(numar, iteratii);
        System.out.println("Numarul " + numar + " este " + (rezultat ? "probabil prim" : "compus"));
        System.out.println("Apasati Enter pentru a inchide...");
        try {
            System.in.read();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static int jacobiSymbol(int a, int n) {
        if (n <= 0 || n % 2 == 0) {
            throw new IllegalArgumentException("n trebuie sa fie un numar impar pozitiv.");
        }
        a = a % n;
        int result = 1;
        while (a != 0) {
            while (a % 2 == 0) {
                a /= 2;
                int nMod8 = n % 8;
                if (nMod8 == 3 || nMod8 == 5) {
                    result = -result;
                }
            }
            int temp = a;
            a = n;
            n = temp;
            if (a % 4 == 3 && n % 4 == 3) {
                result = -result;
            }
            a = a % n;
        }
        return (n == 1) ? result : 0;
    }

    public static boolean Prime(int n, int k) {
        if (n < 2) return false;
        if (n == 2 || n == 3) return true;
        if (n % 2 == 0) return false;

        Random rand = new Random();
        for (int i = 0; i < k; i++) {
            int a = rand.nextInt(n - 2) + 1;
            int jacobi = jacobiSymbol(a, n);
            if (jacobi == 0) return false;
            int modExp = BigInteger.valueOf(a).modPow(BigInteger.valueOf((n - 1) / 2), BigInteger.valueOf(n)).intValue();
            if ((jacobi + n) % n != modExp) {
                return false;
            }
        }
        return true;
    }

    
}
